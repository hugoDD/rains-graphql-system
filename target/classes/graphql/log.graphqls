type Log {
	#日志ID
	id: ID!
	#操作用户
	username: String
	#操作内容
	operation: String
	#耗时
	time: Float
	#操作方法
	method: String
	#方法参数
	params: String
	#操作者IP
	ip: String
	#创建时间
	createTime: Date
	#操作地点
	location: String
	#业务类型
	type:Int
	#登录状态
	status:String

}
input LogCondition {
	#日志ID
	id: ID
	#操作用户
	username: String
	#操作内容
	operation: String
	#耗时
	time: Float
	#操作方法
	method: String
	#方法参数
	params: String
	#操作者IP
	ip: String
	#创建时间
	createTime: Date
	#操作地点
	location: String
}
type Logs {
	data: [Log!]!
	total: Int
}

type LoginLog{
	id: ID!
	username: String
	loginTime: Date
	location: String
	ip: String
	system: String
	browser: String
	status: String
	msg: String
}

input LoginLogCondition{
	id: ID
	username: String
	loginTime: Date
	location: String
	ip: String
	system: String
	browser: String
	loginTimeFrom: String
	loginTimeTo: String
}

type LoginLogs {
	data: [LoginLog!]!
	total: Int
}

extend type Query {
	logDetail(entity: LogCondition): Log
	logPage(page: QueryRequest): Logs
	loginLogPage(page: QueryRequest): LoginLogs
}
extend type Mutation {
	deleteLoginLogs(ids: [String!]!): Boolean
	deleteLogs(ids: [String!]!): Boolean
	exportLogs(page: QueryRequest,entity: LogCondition):Boolean
	exportLoginLogs(page: QueryRequest,entity: LoginLogCondition):Boolean
	optLogBaseMutation(request: QueryRequest): Boolean
	loginLogBaseMutation(request: QueryRequest): Boolean
}
